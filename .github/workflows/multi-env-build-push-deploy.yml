name: Multi-Environment Build, Push, and Deploy

on:
  push:
    branches:
      - dev
      - dev2
      - prd

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Build JAR file
        run: mvn clean package -Dmaven.test.skip

      - name: Set environment variables
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
          if [[ ${{ github.ref }} == 'refs/heads/dev2' ]]; then
            echo "ENV_TAG=dev" >>${GITHUB_ENV}
          else
            echo "ENV_TAG=latest" >>${GITHUB_ENV}
          fi
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Set up QEMU for Multi-Platform Builds
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          driver-opts: network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Multi-Platform Docker Image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ghcr.io/${{ env.OWNER_LC }}/backend:${{ env.ENV_TAG }} \
            --push .

  deploy-dev:
    needs: build-and-push
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
          echo "ENV_TAG=dev" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Set up SSH for Dev
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEV_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Create Dev .env file
        run: |
          echo "SPRING_APPLICATION_BASE-URL=${{ vars.DEV_APPL_BASE_URL }}" >> .env
          echo "SPRING_DATASOURCE_URL=${{ secrets.DEV_DB_URL }}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.DEV_DB_USER }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.DEV_DB_PASS }}" >> .env
          echo "SPRING_MAIL_HOST=${{ secrets.DEV_MAIL_HOST }}" >> .env
          echo "SPRING_MAIL_PORT=${{ secrets.DEV_MAIL_PORT }}" >> .env
          echo "SPRING_MAIL_USERNAME=${{ secrets.DEV_MAIL_USERNAME }}" >> .env
          echo "SPRING_MAIL_PASSWORD=${{ secrets.DEV_MAIL_PASSWORD }}" >> .env
          echo "KEYCLOAK_RESOURCE=${{ secrets.KC_RESOURCE }}" >> .env
          echo "ORGANIZATION_EXTERNAL_ID=${{ secrets.EXTERNAL_ID }}" >> .env
          echo "ORGANIZATION_API-KEY_MOLLIE=${{ secrets.DEV_MOLLIE_API_KEY }}" >> .env
          echo "ORGANIZATION_API-KEY_MAPS=${{ secrets.MAPS_API_KEY }}" >> .env

      - name: Copy Files to Dev Server
        run: |
          scp -o StrictHostKeyChecking=no -P ${{ secrets.DEV_SSH_PORT }} .env ${{ secrets.DEV_SSH_USER }}@${{ secrets.DEV_SSH_HOST }}:/home/${{ secrets.DEV_SSH_USER }}/backend/
          scp -o StrictHostKeyChecking=no -P ${{ secrets.DEV_SSH_PORT }} compose-dev.yml ${{ secrets.DEV_SSH_USER }}@${{ secrets.DEV_SSH_HOST }}:/home/${{ secrets.DEV_SSH_USER }}/backend/compose.yml

      - name: Deploy to Dev Server
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.DEV_SSH_PORT }} ${{ secrets.DEV_SSH_USER }}@${{ secrets.DEV_SSH_HOST }} << 'EOF'
            docker login ghcr.io -u "${{ github.actor }}" -p "${{ secrets.GITHUB_TOKEN }}"
            docker pull ghcr.io/${{ env.OWNER_LC }}/backend:${{ env.ENV_TAG }}
          
            cd /home/${{ secrets.DEV_SSH_USER }}/backend
          
            docker compose down
            docker compose up -d
          EOF
      - name: Cloudflare Cache Purge
        uses: NathanVaughn/actions-cloudflare-purge@v3.1.0
        with:
          cfZone: ${{ secrets.CF_ZONE }}
          cfToken: ${{ secrets.CF_TOKEN }}
          hosts: |
            dev.scoutslebbeke.be

  deploy-prod:
    needs: build-and-push
    if: github.ref == 'refs/heads/prd'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
          echo "ENV_TAG=latest" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Set up SSH for Production
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Create Prod .env file
        run: |
          echo "SPRING_APPLICATION_BASE-URL=${{ vars.APPL_BASE_URL }}" >> .env
          echo "SPRING_DATASOURCE_URL=${{ secrets.PROD_DB_URL }}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.PROD_DB_USER }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.PROD_DB_PASS }}" >> .env
          echo "SPRING_MAIL_HOST=${{ secrets.PROD_MAIL_HOST }}" >> .env
          echo "SPRING_MAIL_PORT=${{ secrets.PROD_MAIL_PORT }}" >> .env
          echo "SPRING_MAIL_USERNAME=${{ secrets.PROD_MAIL_USERNAME }}" >> .env
          echo "SPRING_MAIL_PASSWORD=${{ secrets.PROD_MAIL_PASSWORD }}" >> .env
          echo "KEYCLOAK_RESOURCE=${{ secrets.KC_RESOURCE }}" >> .env
          echo "ORGANIZATION_EXTERNAL_ID=${{ secrets.EXTERNAL_ID }}" >> .env
          echo "ORGANIZATION_API-KEY_MOLLIE=${{ secrets.MOLLIE_API_KEY_PROD }}" >> .env
          echo "ORGANIZATION_API-KEY_MAPS=${{ secrets.MAPS_API_KEY }}" >> .env

      - name: Copy Files to Production Server
        run: |
          scp -o StrictHostKeyChecking=no .env ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/home/${{ secrets.PROD_USER }}/backend/
          scp -o StrictHostKeyChecking=no compose-prod.yml ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/home/${{ secrets.PROD_USER }}/backend/compose.yml

      - name: Deploy to Production Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} << 'EOF'
            podman login ghcr.io -u "${{ github.actor }}" -p "${{ secrets.GITHUB_TOKEN }}"
            podman pull ghcr.io/${{ env.OWNER_LC }}/backend:${{ env.ENV_TAG }}
          
            cd /home/${{ secrets.PROD_USER }}/backend
          
            podman compose down
            podman compose --env-file .env up -d
          EOF
      - name: Cloudflare Cache Purge
        uses: NathanVaughn/actions-cloudflare-purge@v3.1.0
        with:
          cfZone: ${{ secrets.CF_ZONE }}
          cfToken: ${{ secrets.CF_TOKEN }}