name: Build, Push, and Deploy App

on:
  push:
    branches:
      - production

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Build JAR file
        run: mvn clean package -Dmaven.test.skip

      - name: Set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Set up QEMU for Multi-Platform Builds
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          driver-opts: network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Multi-Platform Docker Image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ghcr.io/${{ env.OWNER_LC }}/backend:latest \
            --push .

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Create .env file
        run: |
          echo "SPRING_APPLICATION_BASE-URL=${{ variables.APPL_BASE_URL }}" >> .env
          echo "SPRING_DATASOURCE_URL=${{ secrets.PROD_DB_URL }}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.PROD_DB_USER }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.PROD_DB_PASS }}" >> .env
          echo "SPRING_MAIL_HOST=${{ secrets.PROD_MAIL_HOST }}" >> .env
          echo "SPRING_MAIL_PORT=${{ secrets.PROD_MAIL_PORT }}" >> .env
          echo "SPRING_MAIL_USERNAME=${{ secrets.PROD_MAIL_USERNAME }}" >> .env
          echo "SPRING_MAIL_PASSWORD=${{ secrets.PROD_MAIL_PASSWORD }}" >> .env
          echo "KEYCLOAK_RESOURCE=${{ secrets.KC_RESOURCE }}" >> .env
          echo "ORGANIZATION_EXTERNAL_ID=${{ secrets.EXTERNAL_ID }}" >> .env
          echo "ORGANIZATION_API-KEY_MOLLIE=${{ secrets.MOLLIE_API_KEY_PROD }}" >> .env  
          echo "ORGANIZATION_API-KEY_MAPS=${{ secrets.MAPS_API_KEY }}" >> .env  

      - name: Copy Files to Server
        run: |
          scp -o StrictHostKeyChecking=no .env ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/home/${{ secrets.PROD_USER }}/backend/
          scp -o StrictHostKeyChecking=no compose-server.yml ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/home/${{ secrets.PROD_USER }}/backend/compose.yml

      - name: Deploy Using Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} << 'EOF'
            podman login ghcr.io -u "${{ github.actor }}" -p "${{ secrets.GITHUB_TOKEN }}"
            podman pull ghcr.io/${{ env.OWNER_LC }}/backend:latest
          
            cd /home/${{ secrets.PROD_USER }}/backend
          
            podman compose down
            podman compose --env-file .env up -d
          EOF