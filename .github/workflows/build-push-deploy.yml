name: Build, Push, and Deploy App

on:
  push:
    branches:
      - production
env:
  SPRING_DATASOURCE_URL: ${{ secrets.PROD_DB_URL }}
  SPRING_DATASOURCE_USERNAME: ${{ secrets.PROD_DB_USER }}
  SPRING_DATASOURCE_PASSWORD: ${{ secrets.PROD_DB_PASS }}
  SPRING_MAIL_HOST: localhost
  SPRING_MAIL_USERNAME: todo
  SPRING_MAIL_PASSWORD: todo
  KEYCLOAK_RESOURCE: todo

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Build JAR file
        run: mvn clean package -Dmaven.test.skip

      - name: Set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Set up QEMU for Multi-Platform Builds
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          driver-opts: network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Multi-Platform Docker Image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ghcr.io/${{ env.OWNER_LC }}/backend:latest \
            --push . \
            --build-arg SPRING_DATASOURCE_URL=$SPRING_DATASOURCE_URL

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy Compose File to Server
        run: |
          scp -o StrictHostKeyChecking=no compose-server.yml ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/home/${{ secrets.PROD_USER }}/backend/compose.yml

      - name: Deploy Using Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} << 'EOF'
            podman login ghcr.io -u "${{ github.actor }}" -p "${{ secrets.GITHUB_TOKEN }}"
            podman pull ghcr.io/${{ env.OWNER_LC }}/backend:latest
          
            cd /home/${{ secrets.PROD_USER }}/backend
          
            podman compose down
            podman compose up -d
          EOF
